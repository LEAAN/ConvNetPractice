from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Convolution2D, MaxPooling2D
from keras.optimizers import SGD
from keras.utils import np_utils
import numpy as np
import cPickle
import pickle
import sys
import set_para
import plot
import evalu

def build(which):
	model = Sequential()
	if (which == 'cifar10'):
		model.add(Convolution2D(32, 5, 5, border_mode='same',
		                input_shape=(3, 32, 32)))
		model.add(Activation('relu'))
		model.add(Convolution2D(32, 5, 5))
		model.add(Activation('relu'))
		model.add(MaxPooling2D(pool_size=(2, 2)))
		model.add(Dropout(0.25))

		model.add(Convolution2D(64, 3, 3, border_mode='same'))
		model.add(Activation('relu'))
		model.add(Convolution2D(64, 3, 3))
		model.add(Activation('relu'))
		model.add(MaxPooling2D(pool_size=(2, 2)))
		model.add(Dropout(0.25))

		model.add(Flatten())
		model.add(Dense(512))
		model.add(Activation('relu'))
		model.add(Dropout(0.5))
		model.add(Dense(10))
		model.add(Activation('softmax'))
	else: print ('what r u looking for ==')
	return model

def compile(model, sgd):
	if sgd:
		opt = SGD(lr=0.01, decay=1e-5, momentum=0.9, nesterov=True)
		model.compile(loss='categorical_crossentropy',
          optimizer=opt,
          metrics=['accuracy'])
	else: print ('what r u doing ==')

class cnn:
    def __init__(self, name, which ='cifar10'):
        self.name = name
        self.model = build(which)  # creates a new empty list for each dog
    def info():
    	return 233

	def compile(self, sgd = True):
		if sgd:
			opt = SGD(lr=0.01, decay=1e-5, momentum=0.9, nesterov=True)
			self.model.compile(loss='categorical_crossentropy',
	          optimizer=opt,
	          metrics=['accuracy'])
		else: print ('what r u doing ==')

	# def fit(self, X_train, Y_train, X_test, Y_test, aug = True):
	# 	if not aug:
	# 	    print('No augmentation. You sure?')
	# 	    self.model.fit(X_train, Y_train,
	# 	              batch_size=batch_size,
	# 	              nb_epoch=nb_epoch,
	# 	              validation_data=(X_test, Y_test),
	# 	              shuffle=True)
	# 	else:
	# 	    print('Using real-time data augmentation.')
	# 	    datagen = ImageDataGenerator(
	# 	        featurewise_center=False,  # set input mean to 0 over the dataset
	# 	        samplewise_center=False,  # set each sample mean to 0 
	# 	        featurewise_std_normalization=False,  # divide inputs by std of the dataset 
	# 	        samplewise_std_normalization=False,  # divide each input by its std
	# 	        zca_whitening=False,  # apply ZCA whitening
	# 	        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
	# 	        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
	# 	        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
	# 	        horizontal_flip=True,  # randomly flip images
	# 	        vertical_flip=False)  # randomly flip images

	# 	    # compute quantities required for featurewise normalization
	# 	    # (std, mean, and principal components if ZCA whitening is applied)
	# 	    datagen.fit(X_train)

	# 	    # fit the model on the batches generated by datagen.flow()
	# 	    # if run this part again, the result should be epoch += epoch right?
	# 	    model_hist = self.model.fit_generator(datagen.flow(X_train, Y_train,
	# 	                        batch_size=batch_size),
	# 	                        samples_per_epoch=X_train.shape[0],
	# 	                        nb_epoch=nb_epoch,
	# 	                        validation_data=(X_test, Y_test))
	# 	    acc.append(model_hist.history['val_acc'])
	# 	    avg_acc.append(np.mean(model_hist.history['val_acc'][90:]))
	# 	    m_hist.append(model_hist)



