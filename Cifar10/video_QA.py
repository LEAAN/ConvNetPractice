from __future__ import print_function
from keras.datasets import cifar10
from keras.preprocessing.image import ImageDataGenerator
from keras.layers import Convolution2D, MaxPooling2D
from keras.optimizers import SGD
from keras.utils import np_utils

from keras.layers import Convolution2D, MaxPooling2D, Flatten
from keras.layers import Input, LSTM, Embedding, Dense, merge, Dropout, Activation, Flatten
from keras.models import Model, Sequential
from keras.layers import TimeDistributed
import sys



sys.setrecursionlimit(10000)
modelname = raw_input("Ask me == ")
modelpath = "/home/workstation/Documents/PIROPO/"
# path = '/home/workstation/Documents/humandataset/'
batch_size = 32
nb_classes = 2
nb_epoch = 50
nb_frames = 100
img_channels = 3
img_rows, img_cols = 64, 64                                                                                                                                                        

# this model will encode an image into a vector.
vision_model = Sequential()
vision_model.add(Convolution2D(64, 3, 3, activation='relu', border_mode='same', input_shape=(img_channels, img_rows, img_cols)))
vision_model.add(Convolution2D(64, 3, 3, activation='relu'))
vision_model.add(MaxPooling2D((2, 2)))
vision_model.add(Convolution2D(128, 3, 3, activation='relu', border_mode='same'))
vision_model.add(Convolution2D(128, 3, 3, activation='relu'))
vision_model.add(MaxPooling2D((2, 2)))
vision_model.add(Convolution2D(256, 3, 3, activation='relu', border_mode='same'))
vision_model.add(Convolution2D(256, 3, 3, activation='relu'))
vision_model.add(Convolution2D(256, 3, 3, activation='relu'))
vision_model.add(MaxPooling2D((2, 2)))
vision_model.add(Flatten())

# Video part
video_input = Input(shape = (nb_frames, img_channels, img_rows, img_cols))
encoded_frame_sequence = TimeDistributed(vision_model)(video_input)  # the output will be a sequence of vectors
encoded_video = LSTM(256)(encoded_frame_sequence)  # the output will be a vector

# this is a model-level representation of the question encoder, reusing the same weights as before:
question_encoder = Model(input=question_input, output=encoded_question)

# let's use it to encode the question:
video_question_input = Input(shape=(100,), dtype='int32')
embedded_video_question = Embedding(input_dim=10000, output_dim=256, input_length=100)(video_question_input)
encoded_video_question = LSTM(256)(embedded_video_question)

# and this is our video question answering model:
merged = merge([encoded_video, encoded_video_question], mode='concat')
output = Dense(1000, activation='softmax')(merged)
video_qa_model = Model(input=[video_input, video_question_input], output=output)

# These r sth I wrote myself
sgd = SGD(lr=0.01, decay=1e-4, momentum=0.9, nesterov=True)
video_qa_model.compile(loss='categorical_crossentropy',
              optimizer=sgd,
              metrics=['accuracy'])

# video_train = 100, 3, 64, 64
# question_train = 100,1
# answer_train = 1,
# video_qa_model.fit([video_train, question_train], output = answer_train)
# answer_predict = video_qa_model.predict([video_test, question_test])



# # this will do preprocessing and realtime data augmentation
# print('Using real-time data augmentation.')
# datagen = ImageDataGenerator(
#     featurewise_center=False,  # set input mean to 0 over the dataset
#     samplewise_center=False,  # set each sample mean to 0 
#     featurewise_std_normalization=False,  # divide inputs by std of the dataset 
#     samplewise_std_normalization=False,  # divide each input by its std
#     zca_whitening=False,  # apply ZCA whitening
#     rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
#     width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
#     height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
#     horizontal_flip=True,  # randomly flip images
#     vertical_flip=False)  # randomly flip images

# # fit the model on the batches generated by datagen.flow()
# # if run this part again, the result should be epoch += epoch right?
# model_hist = video_qa_model.fit_generator(datagen.flow(X_train, Y_train,
#                     batch_size=batch_size),
#                     samples_per_epoch=X_train.shape[0],
#                     nb_epoch=nb_epoch,
#                     validation_data=(X_test, Y_test))
# acc =model_hist.history['val_acc']
# avg_acc.append(np.mean(model_hist.history['val_acc'][len(acc)-10:]))
# m_hist.append(model_hist)